---
apiVersion: v1
kind: Namespace
metadata:
  name: yugabyte
# Unrem this LimitRange object for running in larger demo clusters with more cpu and ram per node
#---
# apiVersion: v1
# kind: LimitRange
# metadata:
#   name: mem-limit-range
#   namespace: yugabyte
# spec:
#   limits:
#   - default:
#       cpu: 1
#       memory: 4Gi
#     defaultRequest:
#       cpu: 1
#       memory: 2Gi
#     type: Container
#Clusterrole and binding for yb-master init pod to retrieve topoloy labels
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nodereader
  namespace: yugabyte
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: node-reader
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - pods
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: crb-read-nodes
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: node-reader
subjects:
  - kind: ServiceAccount
    name: nodereader
    namespace: yugabyte
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: yb-master
  namespace: yugabyte
data:
  init-yb.sh: |
    #!/bin/sh
    /home/yugabyte/bin/yb-master \
    --fs_data_dirs=/mnt/disk0,/mnt/disk1 \
    --rpc_bind_addresses=${HOSTNAME}.yb-masters.${NAMESPACE}.svc.cluster.local \
    --server_broadcast_addresses=${HOSTNAME}.yb-masters.${NAMESPACE}.svc.cluster.local:7100 \
    --webserver_interface=0.0.0.0 \
    --master_addresses=yb-master-0.yb-masters:7100,yb-master-1.yb-masters:7100,yb-master-2.yb-masters:7100 \
    --replication_factor=3 \
    --enable_ysql=true \
    --metric_node_name=${HOSTNAME} \
    --memory_limit_hard_bytes=1824522240 \
    --stderrthreshold=0 \
    --num_cpus=1 \
    --undefok=num_cpus,enable_ysql \
    --default_memory_limit_to_ram_ratio=0.85 \
    --placement_cloud=%CSP% \
    --placement_region=%REGION% \
    --placement_zone=%ZONE%\
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: yb-table-servers
  namespace: yugabyte
data:
  init-yb.sh: |
    #!/bin/sh
    /home/yugabyte/bin/yb-tserver \
    --fs_data_dirs=/mnt/disk0,/mnt/disk1 \
    --server_broadcast_addresses=${HOSTNAME}.yb-tservers.${NAMESPACE}.svc.cluster.local:9100 \
    --rpc_bind_addresses=${HOSTNAME}.yb-tservers.${NAMESPACE}.svc.cluster.local \
    --cql_proxy_bind_address=${HOSTNAME}.yb-tservers.${NAMESPACE}.svc.cluster.local \
    --webserver_interface=0.0.0.0 \
    --enable_ysql=true \
    --pgsql_proxy_bind_address=0.0.0.0:5433 \
    --tserver_master_addrs=yb-master-0.yb-masters:7100,yb-master-1.yb-masters:7100,yb-master-2.yb-masters:7100 \
    --metric_node_name=${HOSTNAME} \
    --memory_limit_hard_bytes=3649044480 \
    --stderrthreshold=0 \
    --num_cpus=1 \
    --undefok=num_cpus,enable_ysql \
    --placement_cloud=%CSP% \
    --placement_region=%REGION% \
    --placement_zone=%ZONE%\
---
apiVersion: v1
kind: Service
metadata:
  name: "yb-masters"
  namespace: yugabyte
  labels:
    app: "yb-master"
    service-type: "headless"
spec:
  clusterIP: None
  ports:
    - name: "http-ui"
      port: 7000
    - name: "tcp-rpc-port"
      port: 7100
  selector:
    app: "yb-master"
---
apiVersion: v1
kind: Service
metadata:
  name: "yb-tservers"
  namespace: yugabyte
  labels:
    app: "yb-tserver"
spec:
  clusterIP: None
  ports:
    - name: "http-ui"
      port: 9000
    - name: "http-ycql-met"
      port: 12000
    - name: "http-yedis-met"
      port: 11000
    - name: "http-ysql-met"
      port: 13000
    - name: "tcp-rpc-port"
      port: 9100
    - name: "tcp-yedis-port"
      port: 6379
    - name: "tcp-yql-port"
      port: 9042
    - name: "tcp-ysql-port"
      port: 5433
  selector:
    app: "yb-tserver"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: setup-redis-table
  namespace: yugabyte
spec:
  ttlSecondsAfterFinished: 0
  template:
    spec:
      containers:
        - name: main
          image: "yugabytedb/yugabyte:2.5.1.0-b153"
          command:
            - "sh"
            - "-c"
            - |
              while true; do
                state=$(/home/yugabyte/bin/yb-admin -master_addresses "yb-master-0.yb-masters:7100, yb-master-1.yb-masters:7100, yb-master-2.yb-masters:7100" list_all_masters)
                if [[ $state =~ 'ALIVE' ]]; then
                  break
                fi
                sleep .5
              done
              sleep 30
              /home/yugabyte/bin/yb-admin --master_addresses "yb-master-0.yb-masters:7100, yb-master-1.yb-masters:7100, yb-master-2.yb-masters:7100" setup_redis_table
      restartPolicy: Never
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "yb-master"
  namespace: "yugabyte"
  labels:
    app: "yb-master"
spec:
  serviceName: "yb-masters"
  podManagementPolicy: Parallel
  replicas: 3
  volumeClaimTemplates:
    - metadata:
        name: datadir0
        annotations:
          volume.beta.kubernetes.io/storage-class: cast-block-storage
        labels:
      spec:
        accessModes:
          - "ReadWriteOnce"
        storageClassName: cast-block-storage
        resources:
          requests:
            storage: 1Gi
    - metadata:
        name: datadir1
        annotations:
          volume.beta.kubernetes.io/storage-class: cast-block-storage
        labels:
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: cast-block-storage
        resources:
          requests:
            storage: 1Gi
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  selector:
    matchLabels:
      app: "yb-master"
  template:
    metadata:
      labels:
        app: "yb-master"
    spec:
      serviceAccountName: nodereader
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: topology.storage.csi.cast.ai/csp
                    operator: In
                    values:
                      - aws
                      - gcp
                    # - azure
                    # - do
        # podAntiAffinity:
        #   preferredDuringSchedulingIgnoredDuringExecution:
        #   - weight: 100
        #     podAffinityTerm:
        #       labelSelector:
        #         matchExpressions:
        #         - key: app
        #           operator: In
        #           values:
        #           - "yb-master"
        #       topologyKey: kubernetes.io/hostname
      initContainers:
        - name: init-topology
          image: "photon:3.0-20210108"
          imagePullPolicy: IfNotPresent
          command:
            - "sh"
            - "-c"
            - |
              cp /cm-yb/init-yb.sh /tmp/env/init-yb.sh
              curl -L'#' -o /usr/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 && chmod +x /usr/bin/jq
              export CSP=$(curl -sv --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" https://$KUBERNETES_PORT_443_TCP_ADDR:$KUBERNETES_PORT_443_TCP_PORT/api/v1/nodes/$K8S_NODE | jq '.metadata.labels."topology.cast.ai/csp"')
              export REGION=$(curl -sv --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" https://$KUBERNETES_PORT_443_TCP_ADDR:$KUBERNETES_PORT_443_TCP_PORT/api/v1/nodes/$K8S_NODE | jq '.metadata.labels."topology.kubernetes.io/region"')
              export ZONE=$(curl -sv --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" https://$KUBERNETES_PORT_443_TCP_ADDR:$KUBERNETES_PORT_443_TCP_PORT/api/v1/nodes/$K8S_NODE | jq '.metadata.labels."topology.kubernetes.io/zone"')
              echo "{ \"csp\":$CSP, \"region\":$REGION, \"zone\":$ZONE }" >> /tmp/env/topology.json
              sed -i "s/%CSP%/$CSP/g" /tmp/env/init-yb.sh
              sed -i "s/%REGION%/$REGION/g" /tmp/env/init-yb.sh
              sed -i "s/%ZONE%/$ZONE/g" /tmp/env/init-yb.sh
          env:
            - name: K8S_NODE
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: cm-yb
              mountPath: /cm-yb
            - name: config-shared-volume
              mountPath: /tmp/env
      containers:
        - name: "yb-master"
          image: "yugabytedb/yugabyte:2.5.1.0-b153"
          imagePullPolicy: IfNotPresent
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          # resources:
          # core dumps are collected to workingDir if
          # kernel.core_pattern is set to a relative path like
          # core.%e.%p.%t ref:
          # https://github.com/yugabyte/charts/issues/11
          workingDir: "/mnt/disk0/cores"
          command:
            #command entrypoint is taken from mounted volume written to by init container.
            #init container copies template from configmap yb-master-servers and modifies placeholders
            #for csp, region, and zone
            - "sh"
            - "-c"
            - |
              /tmp/env/init-yb.sh
          ports:
            - containerPort: 7000
              name: "http-ui"
            - containerPort: 7100
              name: "tcp-rpc-port"
          volumeMounts:
            - name: datadir0
              mountPath: /mnt/disk0
            - name: datadir1
              mountPath: /mnt/disk1
            - name: config-shared-volume
              mountPath: /tmp/env/
      volumes:
        - name: config-shared-volume
          emptyDir: {}
        - name: cm-yb
          configMap:
            name: yb-master
            defaultMode: 0755
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "yb-tserver"
  namespace: "yugabyte"
  labels:
    app: "yb-tserver"
spec:
  serviceName: "yb-tservers"
  podManagementPolicy: Parallel
  replicas: 3
  volumeClaimTemplates:
    - metadata:
        name: datadir0
        annotations:
          volume.beta.kubernetes.io/storage-class: cast-block-storage
        labels:
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: cast-block-storage
        resources:
          requests:
            storage: 1Gi
    - metadata:
        name: datadir1
        annotations:
          volume.beta.kubernetes.io/storage-class: cast-block-storage
        labels:
      spec:
        accessModes:
          - "ReadWriteOnce"
        storageClassName: cast-block-storage
        resources:
          requests:
            storage: 1Gi
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  selector:
    matchLabels:
      app: "yb-tserver"
  template:
    metadata:
      labels:
        app: "yb-tserver"
    spec:
      serviceAccountName: nodereader
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: topology.storage.csi.cast.ai/csp
                    operator: In
                    values:
                      - aws
                      - gcp
                    # - azure
                    # - do
        # podAntiAffinity:
        #   preferredDuringSchedulingIgnoredDuringExecution:
        #   - weight: 100
        #     podAffinityTerm:
        #       labelSelector:
        #         matchExpressions:
        #         - key: app
        #           operator: In
        #           values:
        #           - "yb-tserver"
        #       topologyKey: kubernetes.io/hostname
      initContainers:
        - name: init-topology
          image: "photon:3.0-20210108"
          imagePullPolicy: IfNotPresent
          command:
            - "sh"
            - "-c"
            - |
              cp /yb-table-servers/init-yb.sh /tmp/env/init-yb.sh
              curl -L'#' -o /usr/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 && chmod +x /usr/bin/jq
              export CSP=$(curl -sv --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" https://$KUBERNETES_PORT_443_TCP_ADDR:$KUBERNETES_PORT_443_TCP_PORT/api/v1/nodes/$K8S_NODE | jq '.metadata.labels."topology.cast.ai/csp"')
              export REGION=$(curl -sv --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" https://$KUBERNETES_PORT_443_TCP_ADDR:$KUBERNETES_PORT_443_TCP_PORT/api/v1/nodes/$K8S_NODE | jq '.metadata.labels."topology.kubernetes.io/region"')
              export ZONE=$(curl -sv --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" https://$KUBERNETES_PORT_443_TCP_ADDR:$KUBERNETES_PORT_443_TCP_PORT/api/v1/nodes/$K8S_NODE | jq '.metadata.labels."topology.kubernetes.io/zone"')
              echo "{ \"csp\":$CSP, \"region\":$REGION, \"zone\":$ZONE }" >> /tmp/env/topology.json
              sed -i "s/%CSP%/$CSP/g" /tmp/env/init-yb.sh
              sed -i "s/%REGION%/$REGION/g" /tmp/env/init-yb.sh
              sed -i "s/%ZONE%/$ZONE/g" /tmp/env/init-yb.sh
          env:
            - name: K8S_NODE
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: yb-table-servers
              mountPath: /yb-table-servers
            - name: config-shared-volume
              mountPath: /tmp/env
      containers:
        - name: "yb-tserver"
          image: "yugabytedb/yugabyte:2.5.1.0-b153"
          imagePullPolicy: IfNotPresent
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          resources:
          # core dumps are collected to workingDir if
          # kernel.core_pattern is set to a relative path like
          # core.%e.%p.%t ref:
          # https://github.com/yugabyte/charts/issues/11
          workingDir: "/mnt/disk0/cores"
          #command entrypoint is taken from mounted volume written to by init container.
          #init container copies template from configmap yb-table-servers and modifies placeholders
          #for csp, region, and zone
          command:
            - "sh"
            - "-c"
            - |
              /tmp/env/init-yb.sh
          ports:
            - containerPort: 9000
              name: "http-ui"
            - containerPort: 12000
              name: "http-ycql-met"
            - containerPort: 11000
              name: "http-yedis-met"
            - containerPort: 13000
              name: "http-ysql-met"
            - containerPort: 9100
              name: "tcp-rpc-port"
            - containerPort: 6379
              name: "tcp-yedis-port"
            - containerPort: 9042
              name: "tcp-yql-port"
            - containerPort: 5433
              name: "tcp-ysql-port"
          volumeMounts:
            - name: datadir0
              mountPath: /mnt/disk0
            - name: datadir1
              mountPath: /mnt/disk1
            - name: config-shared-volume
              mountPath: /tmp/env
        - name: yb-cleanup
          image: "busybox:1.32"
          env:
            - name: USER
              value: "yugabyte"
          command:
            - "/bin/sh"
            - "-c"
            - >
              mkdir /var/spool/cron;
              mkdir /var/spool/cron/crontabs;
              echo "0 * * * * /home/yugabyte/scripts/log_cleanup.sh" | tee -a /var/spool/cron/crontabs/root;
              crond;
              while true; do
                sleep 86400;
              done
          volumeMounts:
            - name: datadir0
              mountPath: /home/yugabyte/
              subPath: yb-data
      volumes:
        - name: config-shared-volume
          emptyDir: {}
        - name: yb-table-servers
          configMap:
            name: yb-table-servers
            defaultMode: 0755
#### Boutique app starts here ###
--- # ----------------------------------------------------------

# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------
---
apiVersion: v1
kind: Namespace
metadata:
  name: boutique
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkoutservice
  namespace: boutique
spec:
  replicas: 2
  selector:
    matchLabels:
      app: checkoutservice
  template:
    metadata:
      labels:
        app: checkoutservice
    spec:
      containers:
        - name: server
          image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.0
          ports:
            - containerPort: 5050
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:5050"]
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:5050"]
          env:
            - name: PORT
              value: "5050"
            - name: PRODUCT_CATALOG_SERVICE_ADDR
              value: "productcatalogservice:3550"
            - name: SHIPPING_SERVICE_ADDR
              value: "shippingservice:50051"
            - name: PAYMENT_SERVICE_ADDR
              value: "paymentservice:50051"
            - name: EMAIL_SERVICE_ADDR
              value: "emailservice:5000"
            - name: CURRENCY_SERVICE_ADDR
              value: "currencyservice:7000"
            - name: CART_SERVICE_ADDR
              value: "cartservice:7070"
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: checkoutservice
  namespace: boutique
spec:
  type: ClusterIP
  selector:
    app: checkoutservice
  ports:
    - name: grpc
      port: 5050
      targetPort: 5050
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: recommendationservice
  namespace: boutique
spec:
  replicas: 4
  selector:
    matchLabels:
      app: recommendationservice
  template:
    metadata:
      labels:
        app: recommendationservice
    spec:
      terminationGracePeriodSeconds: 5
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: topology.storage.csi.cast.ai/csp
                    operator: In
                    values:
                      - aws
                      - gcp
                    # - azure
                    # - do
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              preference:
                matchExpressions:
                  - key: topology.storage.csi.cast.ai/csp
                    operator: In
                    values:
                      - aws
                      - gcp
      containers:
        - name: server
          image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.0
          ports:
            - containerPort: 8080
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:8080"]
            readinessProbe:
            failureThreshold: 3
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          livenessProbe:
            periodSeconds: 5
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:8080"]
          env:
            - name: PORT
              value: "8080"
            - name: PRODUCT_CATALOG_SERVICE_ADDR
              value: "productcatalogservice:3550"
            - name: GOOGLE_CLOUD_PROJECT
              value: Boutique
          resources:
            requests:
              cpu: 100m
              memory: 220Mi
            limits:
              cpu: 200m
              memory: 450Mi
---
apiVersion: v1
kind: Service
metadata:
  name: recommendationservice
  namespace: boutique
spec:
  type: ClusterIP
  selector:
    app: recommendationservice
  ports:
    - name: grpc
      port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: boutique
spec:
  replicas: 3
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                topologyKey: topology.storage.csi.cast.ai/csp
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - frontend
              weight: 100
      containers:
        - name: server
          image: castai/boutique-eshot-frontend:0.0.1
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: "/_healthz"
              port: 8080
              httpHeaders:
                - name: "Cookie"
                  value: "shop_session-id=x-readiness-probe"
          livenessProbe:
            httpGet:
              path: "/_healthz"
              port: 8080
              httpHeaders:
                - name: "Cookie"
                  value: "shop_session-id=x-liveness-probe"
          env:
            - name: PORT
              value: "8080"
            - name: PRODUCT_CATALOG_SERVICE_ADDR
              value: "productcatalogservice:3550"
            - name: CURRENCY_SERVICE_ADDR
              value: "currencyservice:7000"
            - name: CART_SERVICE_ADDR
              value: "cartservice:7070"
            - name: RECOMMENDATION_SERVICE_ADDR
              value: "recommendationservice:8080"
            - name: SHIPPING_SERVICE_ADDR
              value: "shippingservice:50051"
            - name: CHECKOUT_SERVICE_ADDR
              value: "checkoutservice:5050"
            - name: AD_SERVICE_ADDR
              value: "adservice:9555"
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: boutique
spec:
  type: ClusterIP
  selector:
    app: frontend
  ports:
    - name: http
      port: 80
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: paymentservice
  namespace: boutique
spec:
  replicas: 2
  selector:
    matchLabels:
      app: paymentservice
  template:
    metadata:
      labels:
        app: paymentservice
    spec:
      terminationGracePeriodSeconds: 5
      containers:
        - name: server
          image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.0
          ports:
            - containerPort: 50051
          env:
            - name: PORT
              value: "50051"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:50051"]
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:50051"]
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: paymentservice
  namespace: boutique
spec:
  type: ClusterIP
  selector:
    app: paymentservice
  ports:
    - name: grpc
      port: 50051
      targetPort: 50051
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: productcatalogservice
  namespace: boutique
spec:
  replicas: 2
  selector:
    matchLabels:
      app: productcatalogservice
  template:
    metadata:
      labels:
        app: productcatalogservice
    spec:
      terminationGracePeriodSeconds: 5
      containers:
        - name: server
          image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.0
          ports:
            - containerPort: 3550
          env:
            - name: PORT
              value: "3550"
          readinessProbe:
            periodSeconds: 10
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:3550"]
          livenessProbe:
            periodSeconds: 10
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:3550"]
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: productcatalogservice
  namespace: boutique
spec:
  type: ClusterIP
  selector:
    app: productcatalogservice
  ports:
    - name: grpc
      port: 3550
      targetPort: 3550
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cartservice
  namespace: boutique
spec:
  replicas: 2
  selector:
    matchLabels:
      app: cartservice
  template:
    metadata:
      labels:
        app: cartservice
    spec:
      terminationGracePeriodSeconds: 5
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: topology.storage.csi.cast.ai/csp
                    operator: In
                    values:
                      - aws
                      - gcp
                    # - azure
                    # - do
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              preference:
                matchExpressions:
                  - key: topology.storage.csi.cast.ai/csp
                    operator: In
                    values:
                      - aws
                      - gcp
      containers:
        - name: server
          image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.0
          ports:
            - containerPort: 7070
          env:
            - name: REDIS_ADDR
              value: "yb-tservers.yugabyte.svc.cluster.local:6379"
            - name: PORT
              value: "7070"
            - name: LISTEN_ADDR
              value: "0.0.0.0"
          resources:
            requests:
              cpu: 200m
              memory: 64Mi
            limits:
              cpu: 300m
              memory: 128Mi
          readinessProbe:
            periodSeconds: 5
            exec:
              command:
                ["/bin/grpc_health_probe", "-addr=:7070", "-rpc-timeout=5s"]
          livenessProbe:
            periodSeconds: 5
            exec:
              command:
                ["/bin/grpc_health_probe", "-addr=:7070", "-rpc-timeout=5s"]
---
apiVersion: v1
kind: Service
metadata:
  name: cartservice
  namespace: boutique
spec:
  type: ClusterIP
  selector:
    app: cartservice
  ports:
    - name: grpc
      port: 7070
      targetPort: 7070
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: currencyservice
  namespace: boutique
spec:
  replicas: 2
  selector:
    matchLabels:
      app: currencyservice
  template:
    metadata:
      labels:
        app: currencyservice
    spec:
      terminationGracePeriodSeconds: 5
      containers:
        - name: server
          image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.0
          ports:
            - name: grpc
              containerPort: 7000
          env:
            - name: PORT
              value: "7000"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:7000"]
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:7000"]
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: currencyservice
  namespace: boutique
spec:
  type: ClusterIP
  selector:
    app: currencyservice
  ports:
    - name: grpc
      port: 7000
      targetPort: 7000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shippingservice
  namespace: boutique
spec:
  replicas: 2
  selector:
    matchLabels:
      app: shippingservice
  template:
    metadata:
      labels:
        app: shippingservice
    spec:
      containers:
        - name: server
          image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.0
          ports:
            - containerPort: 50051
          env:
            - name: PORT
              value: "50051"
          readinessProbe:
            periodSeconds: 5
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:50051"]
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:50051"]
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: shippingservice
  namespace: boutique
spec:
  type: ClusterIP
  selector:
    app: shippingservice
  ports:
    - name: grpc
      port: 50051
      targetPort: 50051
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adservice
  namespace: boutique
spec:
  replicas: 2
  selector:
    matchLabels:
      app: adservice
  template:
    metadata:
      labels:
        app: adservice
    spec:
      terminationGracePeriodSeconds: 5
      containers:
        - name: server
          image: gcr.io/google-samples/microservices-demo/adservice:v0.2.0
          ports:
            - containerPort: 9555
          env:
            - name: PORT
              value: "9555"
          resources:
            requests:
              cpu: 200m
              memory: 180Mi
            limits:
              cpu: 300m
              memory: 300Mi
          readinessProbe:
            periodSeconds: 5
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9555"]
          livenessProbe:
            periodSeconds: 15
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9555"]
---
apiVersion: v1
kind: Service
metadata:
  name: adservice
  namespace: boutique
spec:
  type: ClusterIP
  selector:
    app: adservice
  ports:
    - name: grpc
      port: 9555
      targetPort: 9555
---
### The spec.tls.hosts and spec.rules.host need to be update with your CAST cluster GSLB value
### before applying this Ingress. The GSLB address is found in the CAST cluster console.
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: demo-ingress
  namespace: boutique
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
    - hosts:
        - 1849464756.yb-demo-93e3a8fb.onmulti.cloud  #<<< Modify this to match your GSLB or cname
      secretName: demo-tls
  rules:
    - host: 1849464756.yb-demo-93e3a8fb.onmulti.cloud  #<<< Modify this to match your GSLB or cname
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend
                port:
                  name: http
